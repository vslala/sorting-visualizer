{"version":3,"sources":["App.tsx","serviceWorker.ts","redux/reducer.ts","redux/store.ts","index.tsx"],"names":["SORT","GREEN","BLACK","App","bars","useSelector","state","dispatch","useDispatch","useState","arraySize","setArraySize","speed","setSpeed","isRunning","setIsRunning","timeElapsed","setTimeElapsed","info","setInfo","refreshBars","arr","i","y","Math","floor","random","push","x","color","selectionSort","a","startTime","Date","getTime","barsCopy","length","type","payload","wait","j","swap","paintSteelBlue","bubbleSort","insertionSort","less","quickSortOrchestrator","quickSort","start","end","pivot","randomPivot","randomNumber","ms","Promise","resolve","setTimeout","min","max","index1","index2","temp","className","width","height","colorType","data","animation","round","role","aria-label","htmlFor","Array","map","val","index","key","value","id","name","disabled","checked","onChange","event","Number","currentTarget","onClick","console","log","Boolean","window","location","hostname","match","initialState","sortReducer","action","store","createStore","ReactDOM","render","StrictMode","algoStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8323e7c1.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport './style.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {VerticalBarSeries, XYPlot} from \"react-vis\";\n\nconst width = 1080;\nconst height = 400;\n\nconst SORT = \"SORT\";\nconst GREEN = \"green\";\nconst BLACK = \"black\";\nconst STEEL_BLUE = \"steelblue\";\nconst YELLOW = \"yellow\";\n\nfunction App() {\n\n    const bars: any = useSelector<any>(state => state.bars);\n    const dispatch = useDispatch();\n\n    const [arraySize, setArraySize] = useState<number>(10);\n    const [speed, setSpeed] = useState<number>(600);\n    const [isRunning, setIsRunning] = useState<boolean>(false);\n    const [timeElapsed, setTimeElapsed] = useState<number>(0);\n    const [info, setInfo] = useState<any>(<></>);\n\n    const refreshBars = () => {\n        let arr = [];\n        for (let i = 0; i < arraySize; i++) {\n            let y: number = Math.floor(Math.random() * height) + 1;\n            arr.push({\n                x: i,\n                y: y,\n                color: BLACK\n            });\n        }\n        return arr;\n    }\n\n    const refresh = () => {\n        setIsRunning(true);\n        console.log(\"refreshing...\")\n        setTimeElapsed(0);\n        dispatch({type: \"REFRESH\", payload: refreshBars()});\n        setIsRunning(false);\n    }\n\n    const selectionSort = async () => {\n        setIsRunning(true);\n        let startTime = new Date().getTime();\n        setInfo(<p>In computer science, selection sort is an in-place comparison sorting algorithm.\n            It has an O(n²) time complexity, which makes it inefficient on large lists,\n            and generally performs worse than the similar insertion sort</p>);\n\n\n        let barsCopy = [...bars];\n        for (let i = 0; i < barsCopy.length - 1; i++) {\n            barsCopy[i].color = STEEL_BLUE;\n            dispatch({type: SORT, payload: [...barsCopy]});\n            await wait(speed);\n\n            for (let j = i + 1; j < barsCopy.length; j++) {\n                barsCopy[j].color = YELLOW;\n                if (barsCopy[i].y > barsCopy[j].y) {\n                    barsCopy[i].color = GREEN;\n                    barsCopy[j].color = GREEN;\n\n                    swap(barsCopy, i, j);\n                    dispatch({type: SORT, payload: [...barsCopy]});\n                }\n\n                dispatch({type: SORT, payload: [...barsCopy]});\n                barsCopy[j].color = BLACK;\n\n                await wait(speed);\n            }\n\n            barsCopy[i].color = BLACK;\n            dispatch({type: SORT, payload: [...barsCopy]});\n            await wait(speed);\n        }\n\n        await paintSteelBlue(barsCopy);\n\n        setIsRunning(false);\n        setTimeElapsed(new Date().getTime() - startTime);\n        await wait(speed);\n    }\n\n    const bubbleSort = async () => {\n        setIsRunning(true);\n        let startTime = new Date().getTime();\n        setInfo(<p>Bubble sort, sometimes referred to as sinking sort,\n            is a simple sorting algorithm that repeatedly steps through the list,\n            compares adjacent elements and swaps them if they are in the wrong order.\n            The pass through the list is repeated until the list is sorted.</p>)\n\n        let arr = [...bars];\n        for (let i = 0; i < arr.length; i++) {\n            for (let j = 0; j < arr.length - i - 1; j++) {\n\n                arr[j].color = STEEL_BLUE;\n                arr[j + 1].color = YELLOW;\n                dispatch({type: SORT, payload: [...arr]});\n                await wait(speed);\n\n                if (arr[j].y > arr[j + 1].y) {\n                    arr[j].color = GREEN;\n                    arr[j + 1].color = GREEN;\n                    swap(arr, j, j + 1);\n                    dispatch({type: SORT, payload: [...arr]});\n                }\n                await wait(speed);\n\n                arr[j].color = BLACK;\n                arr[j + 1].color = BLACK;\n                dispatch({type: SORT, payload: [...arr]});\n                await wait(speed);\n\n            }\n        }\n\n        await paintSteelBlue(arr);\n\n        setIsRunning(false);\n        setTimeElapsed(new Date().getTime() - startTime);\n        await wait(speed);\n    }\n\n    async function paintSteelBlue(arr: any[]) {\n        for (let i = 0; i < arr.length; i++) {\n            arr[i].color = STEEL_BLUE;\n            dispatch({type: SORT, payload: [...arr]});\n            await wait(speed);\n        }\n    }\n\n    const insertionSort = async () => {\n        setIsRunning(true);\n        let startTime = new Date().getTime();\n        setInfo(<p>Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time.\n            It is much less efficient on large lists than more advanced algorithms such as quicksort,\n            heapsort, or merge sort. </p>)\n\n        let arr = [...bars];\n        for (let i = 0; i < arr.length; i++) {\n            arr[i].color = STEEL_BLUE;\n            dispatch({type: SORT, payload: [...arr]})\n            await wait(speed);\n\n            for (let j = i; j > 0; j--) {\n                arr[j - 1].color = YELLOW;\n                dispatch({type: SORT, payload: [...arr]})\n                await wait(speed);\n\n                if (less(arr, j, j - 1)) {\n                    arr[j].color = GREEN;\n                    arr[j - 1].color = GREEN;\n                    swap(arr, j, j - 1);\n                    dispatch({type: SORT, payload: [...arr]});\n                } else break;\n                await wait(speed);\n\n                arr[j - 1].color = BLACK;\n                dispatch({type: SORT, payload: [...arr]})\n                await wait(speed);\n            }\n\n            arr[i].color = BLACK;\n            dispatch({type: SORT, payload: [...arr]})\n            await wait(speed);\n        }\n\n        await paintSteelBlue(arr);\n\n        await wait(speed);\n        setIsRunning(false);\n        setTimeElapsed(new Date().getTime() - startTime);\n    }\n\n    const quickSortOrchestrator = async () => {\n        setIsRunning(true);\n        let startTime = new Date().getTime();\n        setInfo(<div>\n            <h2>Average Time Complexity: <strong>O(n log n)</strong></h2>\n            <p>Quicksort is an efficient sorting algorithm.\n                Developed by British computer scientist Tony Hoare in 1959 and published in 1961,\n                it is still a commonly used algorithm for sorting. When implemented well,\n                it can be about two or three times faster than its main competitors,\n                merge sort and heapsort.\n            </p>\n        </div>)\n\n        let arr = [...bars];\n        await quickSort(arr, 0, arr.length, 0, 0, 0, 0);\n        await paintSteelBlue(arr);\n\n        setIsRunning(false);\n        setTimeElapsed(new Date().getTime() - startTime);\n    }\n\n    const quickSort = async (arr: any, start: number, end: number, pivot: number, randomPivot: number, i: number, j: number) => {\n        if (start === end) {\n            return;\n        }\n\n        arr[start].color = STEEL_BLUE;\n        arr[end - 1].color = STEEL_BLUE;\n        dispatch({type: SORT, payload: [...arr]});\n        await wait(speed);\n\n\n        randomPivot = start + randomNumber(start, end);\n        arr[randomPivot].color = YELLOW;\n        dispatch({type: SORT, payload: [...arr]});\n        await wait(speed);\n\n\n        pivot = end - 1;\n        swap(arr, randomPivot, pivot);\n        arr[randomPivot].color = BLACK;\n        arr[pivot].color = YELLOW;\n        dispatch({type: SORT, payload: [...arr]});\n\n        await wait(speed);\n        i = start;\n        j = i;\n        while (j < pivot) {\n            if (less(arr, j, pivot)) {\n                arr[j].color = GREEN;\n                arr[pivot].color = GREEN;\n                dispatch({type: SORT, payload: [...arr]});\n\n                await wait(speed);\n                swap(arr, i, j);\n                i++;\n            }\n            j++;\n        }\n\n        swap(arr, i, pivot);\n        arr[i].color = GREEN;\n        dispatch({type: SORT, payload: [...arr]});\n        await wait(speed);\n\n\n        // put the pivot in its correct position\n        pivot = i;\n\n        await quickSort(arr, start, pivot, 0, 0, 0, 0);\n        await quickSort(arr, pivot + 1, end, 0, 0, 0, 0);\n\n        arr[j].color = BLACK;\n        arr[pivot].color = BLACK;\n        arr[start].color = BLACK;\n        arr[end - 1].color = BLACK;\n        dispatch({type: SORT, payload: [...arr]});\n        await wait(speed);\n\n    }\n\n    const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\n    const randomNumber = (min: number, max: number) => {\n        return (Math.floor(Math.random() * (max - min)));\n    }\n\n    const less = (arr: any, index1: number, index2: number) => {\n        return arr[index1].y < arr[index2].y;\n    }\n\n    const swap = (arr: any, index1: number, index2: number) => {\n        let temp = arr[index1].y;\n        arr[index1].y = arr[index2].y;\n        arr[index2].y = temp;\n    }\n\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n\n                        <div className=\"App\">\n                            <XYPlot\n                                width={width}\n                                height={height}\n                                colorType=\"literal\"\n                            >\n                                <VerticalBarSeries data={bars} animation/>\n                            </XYPlot>\n                        </div>\n\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {\n                            timeElapsed > 0 ?\n                                <h1>Total Time Taken = {Math.round(timeElapsed / 1000)} seconds</h1> : <></>\n                        }\n                        {info}\n                    </div>\n                </div>\n            </div>\n            <nav className=\"navbar fixed-bottom navbar-light bg-light \">\n                <div className=\"navbar-brand\">Sorting Visualizer</div>\n                <div className=\"btn-toolbar mb-3\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                    <label htmlFor=\"btn-group\">Size</label><br/>\n                    <div className=\"btn-group btn-group-sm\">\n                        {\n                            [...new Array(6)].map((val, index) => (<div key={index}>\n                                <input value={(index + 1) * 10} type=\"radio\" id={`size_${index}`} name={\"size\"}\n                                       className=\"radio\"\n                                       disabled={isRunning}\n                                       checked={index + 1 === arraySize / 10}\n                                       onChange={(event) => setArraySize(Number(event.currentTarget.value))}\n                                /><br/>\n                                <label htmlFor={`size_${index}`} className={\"radio-label\"}>{(index + 1) * 10}</label>\n                            </div>))\n                        }\n                    </div>\n                </div>\n                <div className=\"btn-toolbar mb-3\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                    <label htmlFor=\"btn-group\">Speed</label><br/>\n                    {\n                        [...new Array(6)].map((val, index) => (<div key={index}>\n                            <input value={(6 - index) * 100} type=\"radio\" id={`speed_${index}`} name={\"speed\"}\n                                   className=\"radio\"\n                                   disabled={isRunning}\n                                   checked={(6 - index) * 100 === speed}\n                                   onChange={(event) => setSpeed(Number(event.currentTarget.value))}\n                            /><br/>\n                            <label htmlFor={`speed_${index}`} className={\"radio-label\"}>{index + 1}</label>\n                        </div>))\n                    }\n                </div>\n                <button type={\"button\"} disabled={isRunning} className={\"btn btn-outline-dark\"}\n                        onClick={refresh}>Generate New Array\n                </button>\n                <button type={\"button\"} disabled={isRunning} className={\"btn btn-outline-dark\"}\n                        onClick={selectionSort}>Selection Sort\n                </button>\n                <button type={\"button\"} disabled={isRunning} className={\"btn btn-outline-dark\"}\n                        onClick={bubbleSort}>Bubble Sort\n                </button>\n                <button type={\"button\"} disabled={isRunning} className={\"btn btn-outline-dark\"}\n                        onClick={insertionSort}>Insertion Sort\n                </button>\n                <button type={\"button\"} disabled={isRunning} className={\"btn btn-outline-dark\"}\n                        onClick={quickSortOrchestrator}>Quick Sort\n                </button>\n            </nav>\n        </>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","export interface AppState {\n    bars: Array<any>\n}\n\nconst initialState = {\n    bars: []\n}\n\nconst sortReducer = (state: any, action: any) => {\n    switch (action.type) {\n        case \"REFRESH\":\n        case \"SORT\": {\n            return {\n                ...state,\n                bars: action.payload\n            }\n        }\n        default:\n            return initialState;\n    }\n}\n\nexport default sortReducer;","import {createStore} from 'redux'\nimport sortReducer from \"./reducer\";\n\nconst store = createStore(sortReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport algoStore from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={algoStore}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}