{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","bars","setBars","arraySize","setArraySize","speed","setSpeed","delay","useEffect","refreshBars","arr","i","y","Math","floor","random","push","x","color","bubbleSort","a","console","log","barsCopy","setTimeout","j","swap","length","index1","index2","temp","className","width","height","colorType","data","animation","href","role","aria-label","htmlFor","Array","map","val","index","value","type","id","name","checked","onChange","event","Number","currentTarget","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.08322ddb.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport './style.css';\nimport {VerticalBarSeries, XYPlot} from 'react-vis';\n\nconst width = 1080;\nconst height = 400;\n\nconst GREEN = \"green\";\nconst BLACK = \"black\";\n\nfunction App() {\n\n    const [bars, setBars] = useState<any>([]);\n    const [arraySize, setArraySize] = useState<number>(10);\n    const [speed, setSpeed] = useState<number>(600);\n    let delay: number = 0;\n\n    useEffect(() => {\n        setBars(refreshBars());\n    }, []);\n\n    const refreshBars = () => {\n        let arr = [];\n        for (let i = 0; i < arraySize; i++) {\n            let y: number = Math.floor(Math.random() * height) + 1;\n            arr.push({\n                x: i,\n                y: y,\n                color: BLACK\n            });\n        }\n        return arr;\n    }\n\n    const refresh = () => {\n        delay = 0;\n        setBars(refreshBars());\n    }\n\n    const bubbleSort = async () => {\n        console.log(\"Bubble Sorting the array...\");\n        let barsCopy = [...bars];\n        for (let i = 0; i < barsCopy.length - 1; i++) {\n            setTimeout(() => {\n                barsCopy[i].color = \"steelblue\";\n                setBars([...barsCopy]);\n            }, delay += speed);\n\n            for (let j = i + 1; j < barsCopy.length; j++) {\n                setTimeout(() => {\n                    barsCopy[j].color = \"yellow\";\n                    if (barsCopy[i].y > barsCopy[j].y) {\n                        barsCopy[i].color = GREEN;\n                        barsCopy[j].color = GREEN;\n\n                        swap(barsCopy, i, j);\n                        setBars([...barsCopy]);\n                    }\n\n                    setBars([...barsCopy]);\n                    barsCopy[j].color = BLACK;\n                }, delay += speed);\n\n            }\n\n            setTimeout(() => {\n                barsCopy[i].color = BLACK;\n                setBars([...barsCopy]);\n            }, delay += speed);\n        }\n\n        for (let i = 0; i < barsCopy.length; i++) {\n            setTimeout(() => {\n                barsCopy[i].color = \"steelblue\";\n                setBars([...barsCopy]);\n            }, delay += speed);\n        }\n\n        setBars([...barsCopy]);\n    }\n\n\n    const swap = (arr: any, index1: number, index2: number) => {\n        let temp = arr[index1].y;\n        arr[index1].y = arr[index2].y;\n        arr[index2].y = temp;\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\"></div>\n                    <div className=\"col\">\n\n                        <div className=\"App\">\n                            <XYPlot\n                                width={width}\n                                height={height}\n                                colorType=\"literal\"\n                            >\n                                <VerticalBarSeries data={bars} animation/>\n                            </XYPlot>\n                        </div>\n\n                    </div>\n                    <div className=\"col\"></div>\n                </div>\n            </div>\n            <nav className=\"navbar fixed-bottom navbar-light bg-light \">\n                <a className=\"navbar-brand\" href=\"#\">Sorting Visualizer</a>\n                <div className=\"btn-toolbar mb-3\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                    <label htmlFor=\"btn-group\">Size</label><br/>\n                    <div className=\"btn-group btn-group-sm\">\n                        {\n                            [...new Array(6)].map((val, index) => (<div>\n                                <input value={(index + 1) * 10} type=\"radio\" id={`size_${index}`} name={\"size\"} className=\"radio\"\n                                       checked={index + 1 === arraySize / 10}\n                                       onChange={(event)  => setArraySize(Number(event.currentTarget.value))}\n                                /><br/>\n                                <label htmlFor={`size_${index}`} className={\"radio-label\"}>{(index + 1) * 10}</label>\n                            </div>))\n                        }\n                    </div>\n                </div>\n                <div className=\"btn-toolbar mb-3\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                    <label htmlFor=\"btn-group\">Speed</label><br/>\n                    {\n                        [...new Array(6)].map((val, index) => (<div>\n                            <input value={(6 - index)*100} type=\"radio\" id={`speed_${index}`} name={\"speed\"} className=\"radio\"\n                                   checked={(6 - index)*100 === speed}\n                                   onChange={(event)  => setSpeed(Number(event.currentTarget.value))}\n                            /><br/>\n                            <label htmlFor={`speed_${index}`} className={\"radio-label\"}>{index + 1}</label>\n                        </div>))\n                    }\n                </div>\n                <button type={\"button\"} className={\"btn btn-outline-dark\"} onClick={refresh}>Generate New Array</button>\n                <button type={\"button\"} className={\"btn btn-outline-dark\"} onClick={bubbleSort}>Bubble Sort</button>\n            </nav>\n        </>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}