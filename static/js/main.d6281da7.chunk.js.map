{"version":3,"sources":["App.tsx","serviceWorker.ts","redux/reducer.ts","redux/store.ts","index.tsx"],"names":["SORT","App","bars","useSelector","state","dispatch","useDispatch","useState","arraySize","setArraySize","speed","setSpeed","delay","refreshBars","arr","i","y","Math","floor","random","push","x","color","selectionSort","a","console","log","barsCopy","setTimeout","type","payload","j","swap","length","index1","index2","temp","className","width","height","colorType","data","animation","href","role","aria-label","htmlFor","Array","map","val","index","key","value","id","name","checked","onChange","event","Number","currentTarget","onClick","Boolean","window","location","hostname","match","initialState","sortReducer","action","store","createStore","ReactDOM","render","StrictMode","algoStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d6281da7.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport './style.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {VerticalBarSeries, XYPlot} from \"react-vis\";\n\nconst width = 1080;\nconst height = 400;\n\nconst SORT = \"SORT\";\nconst GREEN = \"green\";\nconst BLACK = \"black\";\nconst STEEL_BLUE = \"steelblue\";\nconst YELLOW = \"yellow\";\n\nfunction App() {\n\n    const bars: any = useSelector<any>(state => state.bars);\n    const dispatch = useDispatch();\n\n    const [arraySize, setArraySize] = useState<number>(10);\n    const [speed, setSpeed] = useState<number>(600);\n    let delay: number = 0;\n\n    const refreshBars = () => {\n        let arr = [];\n        for (let i = 0; i < arraySize; i++) {\n            let y: number = Math.floor(Math.random() * height) + 1;\n            arr.push({\n                x: i,\n                y: y,\n                color: BLACK\n            });\n        }\n        return arr;\n    }\n\n    const refresh = () => {\n        console.log(\"refreshing...\")\n        delay = 0;\n        dispatch({type: \"REFRESH\", payload: refreshBars()});\n    }\n\n    const selectionSort = async () => {\n        console.log(\"Selection Sort the array...\");\n        let barsCopy = [...bars];\n        for (let i = 0; i < barsCopy.length - 1; i++) {\n            setTimeout(() => {\n                barsCopy[i].color = STEEL_BLUE;\n                dispatch({type: SORT, payload: [...barsCopy]});\n            }, delay += speed);\n\n            for (let j = i + 1; j < barsCopy.length; j++) {\n                setTimeout(() => {\n                    barsCopy[j].color = YELLOW;\n                    if (barsCopy[i].y > barsCopy[j].y) {\n                        barsCopy[i].color = GREEN;\n                        barsCopy[j].color = GREEN;\n\n                        swap(barsCopy, i, j);\n                        dispatch({type: SORT, payload: [...barsCopy]});\n                    }\n\n                    dispatch({type: SORT, payload: [...barsCopy]});\n                    barsCopy[j].color = BLACK;\n                }, delay += speed);\n\n            }\n\n            setTimeout(() => {\n                barsCopy[i].color = BLACK;\n                dispatch({type: SORT, payload: [...barsCopy]});\n            }, delay += speed);\n        }\n\n        for (let i = 0; i < barsCopy.length; i++) {\n            setTimeout(() => {\n                barsCopy[i].color = STEEL_BLUE;\n                dispatch({type: SORT, payload: [...barsCopy]});\n            }, delay += speed);\n        }\n\n        dispatch({type: SORT, payload: [...barsCopy]});\n    }\n\n    const bubbleSort = () => {\n        console.log(\"Bubble Sort the array...\");\n        let arr = [...bars];\n        for (let i = 0; i < arr.length; i++) {\n            for (let j = 0; j < arr.length - i - 1; j++) {\n\n                setTimeout(() => {\n                    arr[j].color = STEEL_BLUE;\n                    arr[j + 1].color = YELLOW;\n                    dispatch({type: SORT, payload: [...arr]});\n                }, delay += speed);\n\n                setTimeout(() => {\n                    if (arr[j].y > arr[j + 1].y) {\n                        arr[j].color = GREEN;\n                        arr[j + 1].color = GREEN;\n                        swap(arr, j, j + 1);\n                        dispatch({type: SORT, payload: [...arr]});\n                    }\n                }, delay += speed);\n\n                setTimeout(() => {\n                    arr[j].color = BLACK;\n                    arr[j + 1].color = BLACK;\n                    dispatch({type: SORT, payload: [...arr]});\n                }, delay += speed);\n\n            }\n        }\n\n        for (let i = 0; i < arr.length; i++) {\n            setTimeout(() => {\n                arr[i].color = STEEL_BLUE;\n                dispatch({type: SORT, payload: [...arr]});\n            }, delay += speed);\n        }\n        console.log(arr);\n        // dispatch({type: SORT, payload: [...arr]});\n    }\n\n    const swap = (arr: any, index1: number, index2: number) => {\n        let temp = arr[index1].y;\n        arr[index1].y = arr[index2].y;\n        arr[index2].y = temp;\n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\"></div>\n                    <div className=\"col\">\n\n                        <div className=\"App\">\n                            <XYPlot\n                                width={width}\n                                height={height}\n                                colorType=\"literal\"\n                            >\n                                <VerticalBarSeries data={bars} animation/>\n                            </XYPlot>\n                        </div>\n\n                    </div>\n                    <div className=\"col\"></div>\n                </div>\n            </div>\n            <nav className=\"navbar fixed-bottom navbar-light bg-light \">\n                <a className=\"navbar-brand\" href=\"#\">Sorting Visualizer</a>\n                <div className=\"btn-toolbar mb-3\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                    <label htmlFor=\"btn-group\">Size</label><br/>\n                    <div className=\"btn-group btn-group-sm\">\n                        {\n                            [...new Array(6)].map((val, index) => (<div key={index}>\n                                <input value={(index + 1) * 10} type=\"radio\" id={`size_${index}`} name={\"size\"}\n                                       className=\"radio\"\n                                       checked={index + 1 === arraySize / 10}\n                                       onChange={(event) => setArraySize(Number(event.currentTarget.value))}\n                                /><br/>\n                                <label htmlFor={`size_${index}`} className={\"radio-label\"}>{(index + 1) * 10}</label>\n                            </div>))\n                        }\n                    </div>\n                </div>\n                <div className=\"btn-toolbar mb-3\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                    <label htmlFor=\"btn-group\">Speed</label><br/>\n                    {\n                        [...new Array(6)].map((val, index) => (<div key={index}>\n                            <input value={(6 - index) * 100} type=\"radio\" id={`speed_${index}`} name={\"speed\"}\n                                   className=\"radio\"\n                                   checked={(6 - index) * 100 === speed}\n                                   onChange={(event) => setSpeed(Number(event.currentTarget.value))}\n                            /><br/>\n                            <label htmlFor={`speed_${index}`} className={\"radio-label\"}>{index + 1}</label>\n                        </div>))\n                    }\n                </div>\n                <button type={\"button\"} className={\"btn btn-outline-dark\"} onClick={refresh}>Generate New Array</button>\n                <button type={\"button\"} className={\"btn btn-outline-dark\"} onClick={selectionSort}>Selection Sort\n                </button>\n                <button type={\"button\"} className={\"btn btn-outline-dark\"} onClick={bubbleSort}>Bubble Sort</button>\n            </nav>\n        </>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export interface AppState {\n    bars: Array<any>\n}\n\nconst initialState = {\n    bars: []\n}\n\nconst sortReducer = (state: any, action:any) => {\n    switch (action.type) {\n        case \"REFRESH\":\n        case \"SORT\": {\n            return {\n                ...state,\n                bars: action.payload\n            }\n        }\n        default: return initialState;\n    }\n}\n\nexport default sortReducer;","import {createStore} from 'redux'\nimport sortReducer from \"./reducer\";\n\nconst store = createStore(sortReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport algoStore from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={algoStore}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}